//===-------------------------------------------------------*- tablegen -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef RD_BASE
#define RD_BASE

include "mlir/IR/OpBase.td"

def RD_Dialect : Dialect {
  let name = "rd";
  let cppNamespace = "::mlir::NPCOMP::rd";
  let description = [{
The `rd` dialect represents parallel computation over collections.

Key features of the `rd` dialect include:
- Pure-functional abstractions, to enable easy analysis and optimization.
- A convenient Python DSL for a frontend to build up pipelines.
- Lowerings down to multiple coroutine-based streaming abstractions for efficient
  incremental computation over datasets larger than RAM.
- Programs generated by the RD abstraction scale down to mobile devices, or up to
  warehouse-scale distributed systems.
- Support for computation checkpointing and restoring to handle faults and to
  support dynamic re-optimiztion (a variation of on-stack replacement).

The RD dialect's Python DSL frontend is intentionally close to the `tf.data` system,
and from which it draws its name. (On a QWERTY keyboard, the two keys to the left of
`tf` are `rd`.)

While the abstractions supported by this dialect are designed to effectively support
training machine learning models (e.g. neural networks), the system is perfectly
suitable for more general computation.
  }];
}

#endif // #ifndef RD_BASE
